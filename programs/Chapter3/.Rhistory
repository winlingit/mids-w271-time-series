plot.temp + geom_point(aes(size = n))
# plot(x = dtt$Temp, y = dtt$w, xlab = 'Temperature (F)', ylab = 'Number of Heat Incidents')
# plot(x = dtp$Pressure, y = dtp$w, xlab = 'Pressure (psi)', ylab = 'Number of Heat Incidents')
#
# plot(x = dtt$Temp, y = dtt$pi.hat, xlab = 'Temperature (F)', ylab = 'Probability of Heat Incidents', circles = sqrt(dtt$n))
# plot(x = dtp$Pressure, y = dtp$pi.hat, xlab = 'Pressure (psi)', ylab = 'Probability of Heat Incidents', circles = sqrt(dtp$n))
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
head(dtt)
head(dtp)
# plots
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = temp, y = pi.hat))
plt.t + geom_point(aes(size = n))
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
head(dtt)
head(dtp)
# plots
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n))
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n))
# plot(x = dtt$Temp, y = dtt$w, xlab = 'Temperature (F)', ylab = 'Number of Heat Incidents')
# plot(x = dtp$Pressure, y = dtp$w, xlab = 'Pressure (psi)', ylab = 'Number of Heat Incidents')
#
# plot(x = dtt$Temp, y = dtt$pi.hat, xlab = 'Temperature (F)', ylab = 'Probability of Heat Incidents', circles = sqrt(dtt$n))
# plot(x = dtp$Pressure, y = dtp$pi.hat, xlab = 'Pressure (psi)', ylab = 'Probability of Heat Incidents', circles = sqrt(dtp$n))
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
ggtitle('Probability of Heat Incidents vs Temperature') +
xlab('Temperature (F)') +
ylab('$\hat{\pi}$')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
ggtitle('Probability of Heat Incidents vs Temperature') +
xlab('Temperature (F)') +
ylab('\hat{\pi}')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
ggtitle('Probability of Heat Incidents vs Temperature') +
xlab('Temperature (F)')
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n)) +
ggtitle('Probability of Heat Incidents vs Pressure') +
xlab('Pressure (psi)')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
labs(title = 'Probability of Heat Incidents vs Temperature', x = 'Temperature (F)')
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n)) +
labs(title = 'Probability of Heat Incidents vs Pressure', x = 'Pressure (psi)')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
labs(title = 'Probability of Heat Incidents vs Temperature', x = 'Temperature (F)')
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n)) +
labs(title = 'Probability of Heat Incidents vs Pressure', x = 'Pressure (psi)')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
labs(title = 'Probability of Heat Incidents vs Temperature', x = 'Temperature (F)')
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n)) +
labs(title = 'Probability of Heat Incidents vs Pressure', x = 'Pressure (psi)')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
labs(title = 'Probability of Heat Incidents vs Temperature', x = 'Temperature (F)')
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n)) +
labs(title = 'Probability of Heat Incidents vs Pressure', x = 'Pressure (psi)')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
labs(title = 'Probability of Heat Incidents vs Temperature', x = 'Temperature (F)')
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n)) +
labs(title = 'Probability of Heat Incidents vs Pressure', x = 'Pressure (psi)')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
labs(title = 'Heat Incidents vs Temperature', x = 'Temperature (F)')
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n)) +
labs(title = 'Heat Incidents vs Pressure', x = 'Pressure (psi)')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
geom_label(aes(label = n)) +
labs(title = 'Heat Incidents vs Temperature', x = 'Temperature (F)') +
theme(legend.position = 'none')
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n)) +
labs(title = 'Heat Incidents vs Pressure', x = 'Pressure (psi)')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
geom_label(aes(label = n)) +
labs(title = 'Heat Incidents vs Temperature', x = 'Temperature (F)') +
theme(legend.position = 'none')
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n)) +
geom_label(aes(label = n)) +
labs(title = 'Heat Incidents vs Pressure', x = 'Pressure (psi)') +
theme(legend.position = 'none')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
labs(title = 'Heat Incidents vs Temperature', x = 'Temperature (F)') +
theme(legend.position = 'none')
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n)) +
labs(title = 'Heat Incidents vs Pressure', x = 'Pressure (psi)') +
theme(legend.position = 'none')
library(data.table)
library(ggplot2)
dt = as.data.table(read.csv('challenger.csv', header = TRUE, sep = ','))
# head(dt)
# data tables for plots
dtt = dt[, .(w = sum(O.ring), n = sum(Number)), by = Temp][, pi.hat := w/n]
dtp = dt[, .(w = sum(O.ring), n = sum(Number)), by = Pressure][, pi.hat := w/n]
# head(dtt)
# head(dtp)
# plots of pi_hat vs. temperature and pressure
par(mfrow = c(2,2))
plt.t = ggplot(data = dtt, aes(x = Temp, y = pi.hat))
plt.t + geom_point(aes(size = n)) +
labs(title = 'Heat Incidents vs Temperature', x = 'Temperature (F)') +
theme(legend.position = 'none')
plt.p = ggplot(data = dtp, aes(x = Pressure, y = pi.hat))
plt.p + geom_point(aes(size = n)) +
labs(title = 'Heat Incidents vs Pressure', x = 'Pressure (psi)') +
theme(legend.position = 'none')
set.seed(2195)  # Set a seed to be able to reproduce the sample
pi.j<-c(0.25, 0.35, 0.2, 0.1, 0.1)
n.j<-rmultinom(n = 1, size = 1000, prob = pi.j)
data.frame(n.j, pihat.j = n.j/1000, pi.j)
?rmultinom
set.seed(9182)
n.j<-rmultinom(n = 5, size = 1000, prob = pi.j)
n.j
n.j/1000
set.seed(7812)
save2<-rmultinom(n = 1000, size = 1, prob = c(0.25, 0.35, 0.2, 0.1, 0.1))
save2[1:5,1:3]  # Each column is one set of observations from a n = 1 multinomial
rowMeans(save2)
dmultinom(x = c(1,0,0,0,0), size = NULL, prob = c(0.25, 0.35, 0.2, 0.1, 0.1))
dmultinom(x = c(1,0,0,0,1), size = NULL, prob = c(0.25, 0.35, 0.2, 0.1, 0.1))
pi.ij<-c(0.2, 0.3, 0.2, 0.1, 0.1, 0.1)  # pi_ij
pi.table<-array(data = pi.ij, dim = c(2,3), dimnames = list(X = 1:2, Y = 1:3))
pi.table
set.seed(9812)
save<-rmultinom(n = 1, size = 1000, prob = pi.ij)
save
c.table1<-array(data = save, dim = c(2,3), dimnames = list(X = 1:2, Y = 1:3))
c.table1
c.table1/sum(c.table1)
pi.cond<-pi.table/rowSums(pi.table)
pi.cond  # pi_j|i
set.seed(8111)
save1<-rmultinom(n = 1, size = 400, prob = pi.cond[1,])
save2<-rmultinom(n = 1, size = 600, prob = pi.cond[2,])
c.table2<-array(data = c(save1[1], save2[1], save1[2], save2[2], save1[3], save2[3]),
dim = c(2,3), dimnames = list(X = 1:2, Y = 1:3))
c.table2
rowSums(c.table2)
c.table2/rowSums(c.table2)
round(c.table1/rowSums(c.table1),4)
getwd()
setwd('w271-time-series/w4')
df = read.csv('w271_summer2017_anes.csv', stringAsFactors = FALSE, header = TRUE, sep = ',')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
party.ideo.table = xtabs(~ party + ideo5, data = df)
party.ideo.table
chisq.test(party.ideo.table, correft = FALSE)
chisq.test(party.ideo.table, correct = FALSE)
summary(party.ideo.table)
party.crimespend.table = xtabs(~ party + crime, correct = FALSE)
party.crimespend.table = xtabs(~ party + crimespend, correct = FALSE)
party.crimespend.table = xtabs(~ party + crimespend, data = df)
party.crimespend.table
chisq.test(party.crimespend.table, correct = FALSE)
summary(party.crimespend.table)
?boxplot
boxplot(crimespend ~ party, data = df)
boxplot(ideo5 ~ party, data = df)
?prop.table
diet <- read.csv(file = "/Users/winlin/Desktop/w271-time-series/programs/Chapter3/Fiber.csv")
diet$fiber<-factor(x = diet$fiber, levels = c("none", "bran", "gum", "both"))
diet$bloat<-factor(x = diet$bloat, levels = c("none", "low", "medium", "high"))
diet.table<-xtabs(formula = count ~ fiber + bloat, data = diet)
diet.table
library(vcd)
install.packages(vcd)
install.packages('vcd')
assocstats(party.ideo.table)
library(vcd)
assocstats(party.ideo.table)
prop.table(party.ideo.table, m = 2)
round(prop.table(party.ideo.table, m = 2), 4)
boxplot(crimespend ~ party, data = df)
round(prop.table(party.crimespend.table, m = 2), 4)
mod.nominal = multinom(party ~ crimespend, data = df)
summary(mod.nominal)
library(car)
install.packages('car')
library(car)
mod.nominal = multinom(party ~ crimespend, data = df)
summary(mod.nominal)
install.package('MASS')
install.packages('MASS')
install.packages("MASS")
library(car)
mod.nominal = multinom(party ~ crimespend, data = df)
summary(mod.nominal)
?multinom
source('~/Desktop/w271-time-series/w4/w4_live_session.R', echo=TRUE)
library(nnet)
mod.nominal = multinom(party ~ crimespend, data = df)
summary(mod.nominal)
Anova(mod.nominal)
ordinal model = polr(as.factor(party) ~ crimespend, data = df, method = 'logistic', Hess = TRUE)
mod.ordinal = polr(as.factor(party) ~ crimespend, data = df, method = 'logistic', Hess = TRUE)
library(MASS)
mod.ordinal = polr(as.factor(party) ~ crimespend, data = df, method = 'logistic', Hess = TRUE)
summary(mod.ordinal)
Anova(mod.ordinal)
chisq.test(party.ideo.table, correct = FALSE)
ind.test = chisq.test(party.ideo.table, correct = FALSE)
ind.test
ind.test = chisq.test(party.crimespend.table, correct = FALSE)
ind.test
assocstats(party.crimespend.table)
summary(party.crimespend.table)
diet.table
class(diet.table)
summary(diet.table)
ind.test<-chisq.test(x = diet.table, correct = FALSE)
ind.test
ind.test$expected
ind.test$stdres  # Standardized Pearson residuals
library(package = vcd)
assocstats(x = diet.table)
diet.table.adj<-diet.table  + ifelse(test = diet.table == 0, yes = 0.01, no = 0)
test.stat<- 2*sum( diet.table * log(diet.table.adj/ind.test$expected) )
test.stat
qchisq(p = 0.95, df = 9)
ind.test$residuals # Pearson residuals easier way
abs(ind.test$residuals)>qnorm(p = 0.995)
list.files()
setwd(..)
setwd(/..)
setwd('..')
list.files
setwd('/Users/winlin/Desktop/w271-time-series/programs/Chapter3')
list.files()
file.edit('Wheat.R')
wheat <- read.csv(file  = "/Users/winlin/Desktop/w271-time-series/programs/Chapter3/wheat.csv")
head(wheat, n = 3)  # n argument gives the number of rows to print
tail(wheat, n = 3)
x11(width = 7, height = 6, pointsize = 12)
stars(x = wheat[order(wheat$type),-1], ncol = 20, key.loc = c(10, 0), draw.segments=TRUE, label = NULL,
cex=0.75)
library(package = MASS)  # Location of parcoord() function
x11(width = 10, height = 6, pointsize = 12)
wheat2<-data.frame(kernel = 1:nrow(wheat), wheat[,2:6],
class.new = ifelse(test = wheat$class == "hrw", yes = 0, no = 1))
head(wheat2)
wheat.colors<-ifelse(test = wheat$type=="Healthy", yes = "black",
no = ifelse(test = wheat$type=="Sprout", yes = "red", no = "green"))
wheat.lty<-ifelse(test = wheat$type=="Healthy", yes = "solid",
no = ifelse(test = wheat$type=="Sprout", yes = "longdash", no = "dotdash"))
parcoord(x = wheat2, col = wheat.colors, lty = wheat.lty)  # Plot
library(package = nnet)
levels(wheat$type)  #Shows the 3 categories
mod.fit<-multinom(formula = type ~ class + density + hardness + size + weight + moisture, data=wheat)
summary(mod.fit)
class(mod.fit)
methods(class = multinom)
sqrt(vcov(mod.fit)[2,2])
sum.fit<-summary(mod.fit)
test.stat<-sum.fit$coefficients/sum.fit$standard.errors
p.value<-2*(1-pnorm(q = abs(test.stat), mean = 0, sd = 1))
round(test.stat,2)
round(p.value,2)
mod.fit.Ho<-multinom(formula = type ~ density + hardness + size + weight + moisture, data=wheat)
anova(mod.fit.Ho, mod.fit)
library(package = car)
Anova(mod.fit)
qchisq(p = 0.95, df = 2)
G.sq.Ho<-mod.fit.Ho$deviance
G.sq.Ha<-mod.fit$deviance
G.sq<-G.sq.Ho-G.sq.Ha
p.value<-1-pchisq(q = G.sq, df = 2)
data.frame(G.sq.Ho, G.sq.Ha, G.sq, p.value, df = 2)
pi.hat<-predict(object = mod.fit, newdata = wheat, type = "probs")
head(pi.hat)
head(predict(object = mod.fit, newdata = wheat, type = "class"))
predict(object = mod.fit, newdata = wheat[1,], type = "class")  # default - this is helpful for discriminant analysis purposes
expl.var<-c(1,0,as.numeric(wheat[1,2:6]))
round(expl.var, 4)
beta.hat<-coefficients(mod.fit)
scab.part<-exp(sum(beta.hat[1,]*expl.var))
sprout.part<-exp(sum(beta.hat[2,]*expl.var))
pi.hat.scab<-scab.part/(1+scab.part+sprout.part)
pi.hat.sprout<-sprout.part/(1+scab.part+sprout.part)
pi.hat.healthy<-1/(1+scab.part+sprout.part)
round(data.frame(pi.hat.healthy, pi.hat.scab, pi.hat.sprout), 4)
x1<-0;          x2<-wheat[1,2]; x3<-wheat[1,3]
x4<-wheat[1,4]; x5<-wheat[1,5]; x6<-wheat[1,6]
scab<-"exp(b20 + b21*x1 + b22*x2 + b23*x3 + b24*x4 + b25*x5 + b26*x6)"
sprout<-"exp(b30 + b31*x1 + b32*x2 + b33*x3 + b34*x4 + b35*x5 + b36*x6)"
g.healthy<-paste("1 / (1 + ", scab, "+", sprout, ")")
g.healthy
calc.healthy<-deltaMethod(object =  mod.fit, g = g.healthy,
parameterNames = c("b20", "b21", "b22", "b23", "b24", "b25", "b26",
"b30", "b31", "b32", "b33", "b34", "b35", "b36"))
names(calc.healthy)
calc.healthy$Estimate  # pi^_Healthy
calc.healthy$SE        # sqrt(Var^(pi^_Healthy))
alpha<-0.05
calc.healthy$Estimate + qnorm(p = c(alpha/2, 1-alpha/2))*calc.healthy$SE
g.scab<-paste(scab, "/ (1 + ", scab, "+", sprout, ")")
g.scab
calc.scab<-deltaMethod(object =  mod.fit, g = g.scab,
parameterNames = c("b20", "b21", "b22", "b23", "b24", "b25", "b26",
"b30", "b31", "b32", "b33", "b34", "b35", "b36"))
calc.scab
calc.scab$Estimate + qnorm(p = c(alpha/2, 1-alpha/2))*calc.scab$SE
g.sprout<-paste(sprout, "/ (1 + ", scab, "+", sprout, ")")
g.sprout
calc.sprout<-deltaMethod(object =  mod.fit, g = g.sprout,
parameterNames = c("b20", "b21", "b22", "b23", "b24", "b25", "b26",
"b30", "b31", "b32", "b33", "b34", "b35", "b36"))
calc.sprout
calc.sprout$Estimate + qnorm(p = c(alpha/2, 1-alpha/2))*calc.sprout$SE
names(mod.fit)  # Note that there is no "coefficients" - need to use coefficients(mod.fit) instead
mod.fit$deviance
mod.fit$convergence
head(mod.fit$fitted.values)
head(mod.fit$residuals, n = 3)
head(residuals(mod.fit), n = 3)
c(1,0,0) - mod.fit$fitted.values[1,]  # First residual
x11(width = 7, height = 6, pointsize = 12)
mod.fit.nom.density<-multinom(formula = type ~ density, data = wheat)
summary(mod.fit.nom.density)
beta.hat<-coefficients(mod.fit.nom.density)
curve(expr = 1/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)), ylab = expression(hat(pi)), xlab = "Density",
xlim = c(min(wheat$density), max(wheat$density)), col = "black", lty = "solid", lwd = 2, n = 1000, type = "n",
panel.first = grid(col = "gray", lty = "dotted"))
curve(expr = 1/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
col = "black", lty = "solid", lwd = 2, n = 1000, add = TRUE,
xlim = c(min(wheat$density[wheat$type == "Healthy"]), max(wheat$density[wheat$type == "Healthy"])))  # Healthy
curve(expr = exp(beta.hat[1,1] + beta.hat[1,2]*x)/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
col = "green", lty = "dotdash", lwd = 2, n = 1000, add = TRUE,
xlim = c(min(wheat$density[wheat$type == "Scab"]), max(wheat$density[wheat$type == "Scab"])))  # Scab
curve(expr = exp(beta.hat[2,1] + beta.hat[2,2]*x)/(1 + exp(beta.hat[1,1] + beta.hat[1,2]*x) + exp(beta.hat[2,1] + beta.hat[2,2]*x)),
col = "red", lty = "longdash", lwd = 2, n = 1000, add = TRUE,
xlim = c(min(wheat$density[wheat$type == "Sprout"]), max(wheat$density[wheat$type == "Sprout"])))  # Sprout
legend(x = 1.4, y = 0.8, legend=c("Healthy", "Sprout", "Scab"), lty=c("solid","longdash","dotdash"),
col=c("black","red","green"), bty="n", lwd = c(2,2,2), seg.len = 4)
density.values<-seq(from = 0.8, to = 1.6, by = 0.1)
data.frame(density.values, round(predict(object = mod.fit.nom.density, newdata = data.frame(density = density.values), type = "probs"), 2))
mod.fit.trans1<-multinom(formula = type ~ class + density + I(density^2) + density:class, data=wheat)  # Does not converge (notice says "stopped after 100")
summary(mod.fit.trans1)
mod.fit.trans2<-multinom(formula = type ~ class + density + I(density^2) + density:class, data=wheat,
maxit = 1000)  # Converges
summary(mod.fit.trans2)
wheat.original<-wheat  # Save original format
wheat$type<-relevel(x = wheat$type, ref = "Sprout")
levels(wheat$type)
mod.fit.relevel<-multinom(formula = type ~ class + density + hardness + size + weight + moisture, data=wheat)
summary(mod.fit.relevel)
wheat<-wheat.original  # Change back to original format
