library(xts)
install.packages('xts')
library(xts)
djiar = diff(log(djia$Close))[-1]
plot(djiar, main = 'DJIA Returns', type = 'n')
lines(djiar)
par(mfrow = c(2,1))
plot(soi, main = 'Southern Oscillation Index')
plot(rec, main = 'Recruitment')
par(mfrow = c(2,1), mar = c(3,2,1,0) + .5, mgp = c(1.6,.6,0))
ts.plot(fmri1[,2:5], col=1:4, ylab='BOLD', xlab='', main='Cortex')
ts.plot(fmri1[,6:9], col=1:4, ylab='BOLD', xlab='', main='Thalam & Cereb')
mtext("Time (1 pt = 2 sec)", side=1, line=2)
par(mfrow = c(2,1), mar = c(3,2,1,0) + .5, mgp = c(1.6,.6,0))
ts.plot(fmri1[,2:5], col=1:4, ylab='BOLD', xlab='', main='Cortex')
ts.plot(fmri1[,6:9], col=1:4, ylab='BOLD', xlab='', main='Thalam & Cereb')
mtext("Time (1 pt = 2 sec)", side=1, line=2)
w = rnorm(500, 0, 1)
v = filter(w, sides=2, rep(1/3,3))
par(mfrow=c(2,1))
plot.ts(w, main='white noise')
plot.ts(v, ylim=c(-3,3), main='moving average')
par(mfrow = c(2,1), mar = c(3,2,1,0) + .5, mgp = c(1.6,.6,0))
ts.plot(fmri1[,2:5], col=1:4, ylab='BOLD', xlab='', main='Cortex')
ts.plot(fmri1[,6:9], col=1:4, ylab='BOLD', xlab='', main='Thalam & Cereb')
mtext("Time (1 pt = 2 sec)", side=1, line=2)
par(mfrow = c(2,1))
plot(soi, main = 'Southern Oscillation Index')
plot(rec, main = 'Recruitment')
# AR simulation with Gaussian white noise
w = rnorm(550, 0, 1)
x = filter(w, filter=c(1,-.9), method='recursive')[-(1:50)]
plot.ts(x, main='autoregression')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
knitr::opts_chunk$set(echo = TRUE)
w = rnorm(150, 0, 1)
x = filter(w, filter=c(1,1), method='recursive')[-(1:50)]
plot.ts(x, main='autoregression')
set.seed(154)
w = rnorm(200)
x = cumsum(w)
wd = w + .2
xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main='random walk')
abline(a=0, b=.2, lty=2)
lines(x, col=4)
abline(h=0, col=4, lty=2)
# AR simulation with Gaussian white noise
w = rnorm(550, 0, 1)
x = filter(w, filter=c(1,-.9), method='recursive')[-(1:50)]
plot.ts(x, main='autoregression')
cs = 2*cos(2*pi*1:500/50 + .6*pi)
w = rnorm(500,0,1)
par(mfrow=c(3,1), mar=c(3,2,2,1), cex.main=1.5)
plot.ts(cs, main = expression(2*cos(2*pi*t/50 + .6*pi)))
plot.ts(cs+w, main = expression(2*cos(2*pi*t/50 + .6*pi) + N(0,1)))
plot.ts(cs+5*w, main = expression(2*cos(2*pi*t/50 + .6*pi) + N(0,5^2)))
r = round(acf(soi, 6, plot=F)$acf[-1], 3)
par(mfrow=c(1,2), mar=c(3,3,1,1), mgp=c(1.6,.6,0))
plot(lag(soi,-1), soi)
legend('topleft', legend=r[1])
plot(lag(soi,-6), soi)
legend('topleft', legend=r[6])
set.seed(101011)
# simulated coin tosses
x1 = 2*(2*rbinom(11, 1, .5) - 1)
x2 = 2*(2*rbinom(101, 1, .5) - 1)
y1 = 5 + filter(x1, sides=1, filter=c(1,-.5))[-1]
y2 = 5 + filter(x2, sides=1, filter=c(1,-.5))[-1]
plot.ts(y1, type='s')
plot.ts(y2, type='s')
acf(y1, lag.max=4, plot=F)
acf(y2, lag.max=4, plot=F)
par(mfrow = c(3,1))
acf(soi, 48, main='Southern Oscillation Index')
acf(rec, 48, main='Recruitment')
ccf(soi, rec, 48, main='SOI vs Recruitment', ylab='CCF')
set.seed(1492)
num = 120
t = 1:num
x = ts(2*cos(2*pi*t/12) + rnorm(num), freq=12)
y = ts(2*cos(2*pi*(t+5)/12) + rnorm(num), freq=12)
Yw = resid(lm(y ~ cos(2*pi*t/12) + sin(2*pi*t/12), na.action=NULL))
par(mfrow = c(3,2), mgp = c(1.6,.6,0), mar = c(3,3,1,1))
plot(x)
plot(y)
acf(x, 48, ylab = 'ACF(x)')
acf(y, 48, ylab = 'ACF(y)')
ccf(x, y, 24, ylab = 'CCF(x, y)')
ccf(x, Yw, 24, ylab = 'CCF(x, Yw)', ylim = c(-.6,.6))
knitr::opts_chunk$set(echo = TRUE)
herald = read.table('Herald.dat', header = T)
attach(herald)
x = CO; y = Benzoa; n = length(x)
sum((x - mean(x)) * (y - mean(y))) / (n - 1)
mean((x - mean(x)) * (y - mean(y)))
cov(x, y)
herald = read.table('Herald.dat', header = T)
attach(herald)
# covariance
x = CO; y = Benzoa; n = length(x)
sum((x - mean(x)) * (y - mean(y))) / (n - 1)
mean((x - mean(x)) * (y - mean(y)))
cov(x, y)
herald = read.table('Herald.dat', header = T)
attach(herald)
# covariance
x = CO; y = Benzoa; n = length(x)
sum((x - mean(x)) * (y - mean(y))) / (n - 1)
mean((x - mean(x)) * (y - mean(y)))
cov(x, y)
cov(x, y) / (sd(x) * sd(y))
cor(x, y)
knitr::opts_chunk$set(echo = TRUE)
wine = read.table('wine.dat', header = T)
attach(wine)
sweetw.ts = ts(sweetw, start = c(1980,1), freq = 12)
plot(sweetw.ts, xlab = 'Time (months)', ylab = 'sales(1000 litres)')
sweetw.hw = HoltWinters(sweetw.ts, seasonal = 'mult')
sweetw.hw; sweetw.hw$coef; sweetw.hw$SSE
wine = read.table('wine.dat', header = T)
attach(wine)
sweetw.ts = ts(sweetw, start = c(1980,1), freq = 12)
plot(sweetw.ts, xlab = 'Time (months)', ylab = 'sales(1000 litres)')
sweetw.hw = HoltWinters(sweetw.ts, seasonal = 'mult')
sweetw.hw; sweetw.hw$coef; sweetw.hw$SSE
sqrt(sweetw.hw$SSE / length(sweetw))
sd(sweetw)
plot(sweetw.hw$fitted)
plot(sweetw.hw)
wine = read.table('wine.dat', header = T)
attach(wine)
sweetw.ts = ts(sweetw, start = c(1980,1), freq = 12)
plot(sweetw.ts, xlab = 'Time (months)', ylab = 'sales(1000 litres)')
sweetw.hw = HoltWinters(sweetw.ts, seasonal = 'mult')
sweetw.hw; sweetw.hw$coef; sweetw.hw$SSE
sqrt(sweetw.hw$SSE / length(sweetw))
sd(sweetw)
plot(sweetw.hw$fitted)
plot(sweetw.hw)
ap.hw = HoltWinters(ap, seasonal = 'mult')
plot(ap.hw)
ap.predict = predict(ap.hw, n.ahead = 4*12)
ts.plot(ap.ap.predict, lty = 1:2)
ap.hw = HoltWinters(ap, seasonal = 'mult')
plot(ap.hw)
ap.predict = predict(ap.hw, n.ahead = 4*12)
ts.plot(ap, ap.predict, lty = 1:2)
knitr::opts_chunk$set(echo = TRUE)
build = read.table('ApprovActiv.dat', header = T); attach(build);
build = read.table('ApprovActiv.dat', header = T); attach(build);
app.ts = ts(Approvals, start = c(1996,1), freq = 4)
act.ts = ts(Activity, start = c(1996,1), freq = 4)
ts.plot(app.ts, act.ts, lty = c(1,3))
build = read.table('ApprovActiv.dat', header = T); attach(build);
app.ts = ts(Approvals, start = c(1996,1), freq = 4)
act.ts = ts(Activity, start = c(1996,1), freq = 4)
ts.plot(app.ts, act.ts, lty = c(1,3))
acf(ts.union(app.ts, act.ts))
app.ran = decompose(app.ts)$random
app.ran.ts = window(app.ran, start = c(1996,3))
act.ran = decompose(act.ts)$random
act.ran.ts = window(act.ran, start = c(1996,3))
acf(ts.union(app.ran.ts, act.ran.ts))
build = read.table('ApprovActiv.dat', header = T); attach(build);
app.ts = ts(Approvals, start = c(1996,1), freq = 4)
act.ts = ts(Activity, start = c(1996,1), freq = 4)
ts.plot(app.ts, act.ts, lty = c(1,3))
acf(ts.union(app.ts, act.ts))
app.ran = decompose(app.ts)$random
app.ran.ts = window(app.ran, start = c(1996,3))
act.ran = decompose(act.ts)$random
act.ran.ts = window(act.ran, start = c(1996,3))
acf(ts.union(app.ran.ts, act.ran.ts))
knitr::opts_chunk$set(echo = TRUE)
x = read.csv('week8SeriesTiwari.csv', header = T)
head(x); tail(x)
x = read.csv('week8SeriesTiwari.csv', header = T)
head(x); tail(x)
plot(x, type = 'l')
x = read.csv('week8SeriesTiwari.csv', header = T)
head(x); tail(x)
plot(x[,1], type = 'l')
x = read.csv('week8SeriesTiwari.csv', header = T)
head(x); tail(x)
plot(x[,1], type = 'l')
hist(x[,1])
train = x[1:990, 1]
test = x[991:1000, 1]
plot(train, type = 'l')
train = x[1:990, 1]
test = x[991:1000, 1]
plot(train, type = 'l')
hist(train)
train = x[1:990, 1]
test = x[991:1000, 1]
plot(train, type = 'l')
hist(train)
acf(train)
train = x[1:990, 1]
test = x[991:1000, 1]
plot(train, type = 'l')
hist(train)
acf(train)
pacf(train)
order.aid.list = list()
for (p in 1:15) {
m0 = arima(train, order = c(p,0,0), method = 'ML')
order.aic.list[[p]] = data.frame(order = p, aic = m0$aic)
}
order.aic.list = list()
for (p in 1:15) {
m0 = arima(train, order = c(p,0,0), method = 'ML')
order.aic.list[[p]] = data.frame(order = p, aic = m0$aic)
}
order.aic.df = bind_rows(order.aic.list)
order.aic.list = list()
for (p in 1:15) {
m0 = arima(train, order = c(p,0,0), method = 'ML')
order.aic.list[[p]] = data.frame(order = p, aic = m0$aic)
}
order.aic.df = rbind(order.aic.list)
plot(order.aic.df$order, order.aic.df$aic, type = 'l')
knitr::opts_chunk$set(echo = TRUE)
# simulate AR(1) process
set.seed(1)
x = w = rnorm(100)
for (t in 2:100) x[t] = .7 * x[t - 1] + w[t]
plot(x, type = 'l')
acf(x)
pacf(x)
?pairs
knitr::opts_chunk$set(echo = TRUE)
par(mfrow = c(3,1))
plot(cmort, main = 'Cardiovascular Mortality')
library(astsa)
par(mfrow = c(3,1))
plot(cmort, main = 'Cardiovascular Mortality')
library(astsa)
# separate time series plots
par(mfrow = c(3,1))
plot(cmort, main = 'Cardiovascular Mortality')
plot(tempr, main = 'Temperature')
plot(part, main = 'Particulates')
# time series plots
dev.new()
ts.plot(cmort, tempr, part, col = 1:3)
# scatterplot matrix
dev.new()
pairs(cbind(mortality = cmort, temperature = tempr, particulates = part))
temp = tempr - mean(tempr)
temp2 = temp^2
trend = time(cmort)
# fit OLM model
fit = lm(cmort ~ trend + temp + temp2 + part, na.action = NULL)
summary(fit)
# ANOVA tests
summary(aov(fit))
summary(aov(lm(cmort ~ cbind(trend, temp, temp2, part))))
num = length(cmort)
# goodness of fit
AIC(fit)/num - log(2*pi)
BIC(fit)/num) - log(2*pi)
install.packages('dynlm')
fit = lm(chicken ~ time(chicken), na.action = NULL)
# remove trend
par(mfrow = c(2,1))
plot(resid(fit), type = 'o', main = 'detrended')
fit = lm(chicken ~ time(chicken), na.action = NULL)
# remove trend
par(mfrow = c(2,1))
plot(resid(fit), type = 'o', main = 'detrended')
fit = lm(chicken ~ time(chicken), na.action = NULL)
# remove trend
par(mfrow = c(2,1))
plot(resid(fit), type = 'o', main = 'detrended')
plot(diff(chicken), type = 'o', main = 'first difference')
# ACFs
par(mfrow = c(3,1))
acf(chicken, 48, main = 'chicken')
acf(resid(fit), 48, main = 'detrended')
acf(diff(chicken), 48, main = 'first difference')
fit = lm(chicken ~ time(chicken), na.action = NULL)
# remove trend
par(mfrow = c(2,1))
plot(resid(fit), type = 'o', main = 'detrended')
plot(diff(chicken), type = 'o', main = 'first difference')
# ACFs
dev.new()
par(mfrow = c(3,1))
acf(chicken, 48, main = 'chicken')
acf(resid(fit), 48, main = 'detrended')
acf(diff(chicken), 48, main = 'first difference')
fit = lm(chicken ~ time(chicken), na.action = NULL)
# remove trend
par(mfrow = c(2,1))
plot(resid(fit), type = 'o', main = 'detrended')
fit = lm(chicken ~ time(chicken), na.action = NULL)
# remove trend
par(mfrow = c(2,1))
plot(resid(fit), type = 'o', main = 'detrended')
plot(diff(chicken), type = 'o', main = 'first difference')
# ACFs
par(mfrow = c(3,1))
acf(chicken, 48, main = 'chicken')
acf(resid(fit), 48, main = 'detrended')
acf(diff(chicken), 48, main = 'first difference')
fit = lm(chicken ~ time(chicken), na.action = NULL)
# remove trend
par(mfrow = c(2,1))
plot(resid(fit), type = 'l', main = 'detrended')
plot(diff(chicken), type = 'l', main = 'first difference')
# ACFs
par(mfrow = c(3,1))
acf(chicken, 48, main = 'chicken')
acf(resid(fit), 48, main = 'detrended')
acf(diff(chicken), 48, main = 'first difference')
par(mfrow = c(2,1))
plot(diff(globtemp), type = 'o')
mena(diff(globtemp))
par(mfrow = c(2,1))
plot(diff(globtemp), type = 'l')
mean(diff(globtemp))
acf(diff(gtemp), 48)
knitr::opts_chunk$set(echo = TRUE)
par(mfrow = c(2,1))
plot(varve, main = 'varve', ylab = '')
library(astsa)
par(mfrow = c(2,1))
plot(varve, main = 'varve', ylab = '')
plot(log(varve), main = 'log(varve)', ylab = '')
# scatterplot matrix of lags
lag1.plot(soi, 12)
lag2.plot(soi, rec, 8)
dummy = ifelse(soi < 0, 0, 1)
fish = ts.intersect(rec, soiL6 = lag(soi, -6), dL6 = lag(dummy, -6), dframe = T)
summary(fit = lm(rec ~ soiL6*dL6, data = fish, na.action = NULL))
dummy = ifelse(soi < 0, 0, 1)
fish = ts.intersect(rec, soiL6 = lag(soi, -6), dL6 = lag(dummy, -6), dframe = T)
summary(fit = lm(rec ~ soiL6*dL6, data = fish, na.action = NULL))
dummy = ifelse(soi < 0, 0, 1)
fish = ts.intersect(rec, soiL6 = lag(soi, -6), dL6 = lag(dummy, -6), dframe = T)
fit = lm(rec ~ soiL6*dL6, data = fish, na.action = NULL)
summary(fit)
dummy = ifelse(soi < 0, 0, 1)
fish = ts.intersect(rec, soiL6 = lag(soi, -6), dL6 = lag(dummy, -6), dframe = T)
fit = lm(rec ~ soiL6*dL6, data = fish, na.action = NULL)
summary(fit)
attach(fish)
plot(soiL6, rec)
lines(lowess(soiL6, rec), col = 4, lwd = 2)
points(soiL6, fitted(fit), pch = '+', col = 2)
plot(resid(fit))
acf(resid(fit))
dummy = ifelse(soi < 0, 0, 1)
fish = ts.intersect(rec, soiL6 = lag(soi, -6), dL6 = lag(dummy, -6), dframe = T)
fit = lm(rec ~ soiL6*dL6, data = fish, na.action = NULL)
summary(fit)
attach(fish)
#scatterplot w/ lowess fit
plot(soiL6, rec)
lines(lowess(soiL6, rec), col = 4, lwd = 2)
points(soiL6, fitted(fit), pch = '+', col = 2)
# residuals
plot(resid(fit))
acf(resid(fit))
set.seeed(90210)
set.seed(90210)
x = 2*cos(2*pi*1:500/50 + .6*pi) + rnorm(500,0,5)
z1 = cos(2*pi*1:500/50)
z2 = sin(2*pi*1:500/50)
fit = lm (x ~ 0 + z1 + z2)
summary(fit)
set.seed(90210)
x = 2*cos(2*pi*1:500/50 + .6*pi) + rnorm(500,0,5)
z1 = cos(2*pi*1:500/50)
z2 = sin(2*pi*1:500/50)
fit = lm (x ~ 0 + z1 + z2)
summary(fit)
par(mfrow = c(2,1))
plot.ts(x)
plot.ts(x, col = 8, ylab = expression(hat(x)))
lines(fitted(fit), col = 2)
wgts = c(.5, rep(1,11), .5)/12
soif = filter(soi, sides = 2, filter = wgts)
plot(soi)
lines(soif, lwd = 2, col = 4)
plot(soi)
lines(ksmooth(time(soi), soi, 'normal', bandwidth = 1), lwd = 2, col = 4)
# lowess smoother
plot(soi)
lines(lowess(soi, f = .05), lwd = 2, col = 4)
lines(lowess(soi), lty = 2, lwd = 2, col = 2)
plot(tempr, cmort, xlab = 'Temperature', ylab = 'Mortality')
lines(lowess(tempr, cmort))
?quantmod
knitr::opts_chunk$set(echo = TRUE)
# simulate AR(1) process
read.table('pounds_nz.dat', header = T)
x.ts = ts(x, st = 1991, freq = 4)
x.ma = arima(x.ts, order = c(0,0,1))
x.ma
acf(x.ma$res[-1])
knitr::opts_chunk$set(echo = TRUE)
library(cars)
install.packages('cars')
knitr::opts_chunk$set(echo = TRUE)
library(car)
summary(cars)
summary(crim4)
summary(crime4)
summary(crimes.82)
install.packages('woolrdige')
install.packages('woolridge')
install.packages('wooldridge')
knitr::opts_chunk$set(echo = TRUE)
library(car)
lbirary(wooldridge)
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(wooldridge)
summary(crime2)
summary(crime2)
crimes.82 = crime2[crime2$year==82]
summary(crime2)
crimes.82 = crime2[crime2$year==82,]
ols.fit1 = lm(crmrte ~ unem, data = crimes.82)
summary(crime2)
crimes.82 = crime2[crime2$year==82,]
ols.fit1 = lm(crmrte ~ unem, data = crimes.82)
summary(ols.fit1)
# summary(crime2)
crimes.82 = crime2[crime2$year==82,]
ols.fit1 = lm(crmrte ~ unem, data = crimes.82)
summary(ols.fit1)
# summary(crime2)
crimes.82 = crime2[crime2$year==82,]
ols.fit1 = lm(crmrte ~ unem, data = crimes.82)
summary(ols.fit1)
plot(ols.fit1)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir = "C:/Users/kctob/OneDrive/Documents/Berkeley/271/mids-w271-time-series/lab2")
library(car)
library(stargazer)
library(Hmisc)
library(effects)
# EDA
unemp <- read.csv("UNRATENSA.csv")
summary(unemp)
scatterplotMatrix(unemp[c(3,4,5)])
# EDA
unemp <- read.csv("UNRATENSA.csv")
summary(unemp)
plot.ts(unemp)
# EDA
unemp <- read.csv("UNRATENSA.csv")
summary(unemp)
unemp.ts = ts(unemp, frequency = 12)
plot.ts(unemp.ts)
# EDA
unemp <- read.csv("UNRATENSA.csv")
summary(unemp)
unemp.ts = ts(unemp, frequency = 12)
plot.ts(unemp.ts[,2])
?ts
# EDA
unemp <- read.csv("UNRATENSA.csv")
summary(unemp)
unemp.ts = ts(unemp, start = c(1948, 1), frequency = 12)
plot.ts(unemp.ts[,2])
# EDA
unemp <- read.csv("UNRATENSA.csv")
summary(unemp)
unemp.ts = ts(unemp, start = c(1948, 1), frequency = 12)
plot.ts(unemp.ts[,2], ylab = 'Unemployment rate by month, January 1948 - June 2017
# EDA
unemp <- read.csv("UNRATENSA.csv")
summary(unemp)
unemp.ts = ts(unemp, start = c(1948, 1), frequency = 12)
plot.ts(unemp.ts[,2], ylab = 'Unemployment rate by month, January 1948 - June 2017')
# EDA
unemp <- read.csv("UNRATENSA.csv")
summary(unemp)
unemp.ts = ts(unemp, start = c(1948, 1), frequency = 12)
plot.ts(unemp.ts[,2], main = 'Unemployment rate by month, January 1948 - June 2017')
# EDA
unemp <- read.csv("UNRATENSA.csv")
summary(unemp)
unemp.ts = ts(unemp, start = c(1948, 1), frequency = 12)
plot.ts(unemp.ts[,2], main = 'Unemployment rate by month, January 1948 - June 2017', ylab = 'Percent of population')
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(wooldridge)
# summary(crime2)
crimes.87 = crime2[crime2$year==87,]
ols.fit2 = lm(crmrte ~ unem, data = crimes.87)
summary(ols.fit2)
plot(ols.fit2)
View(crimes.82)
View(unemp)
setwd('w271-time-series/programs_wooldridge/')
load('cps78_85.RData')
load('cps78_85.RData')
scatterplotMatrix(data)
library(cars)
library(car)
scatterplotMatrix(data)
